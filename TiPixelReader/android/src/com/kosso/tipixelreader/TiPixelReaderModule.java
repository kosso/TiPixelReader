/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.kosso.tipixelreader;

import java.io.File;
import android.net.Uri;
import android.os.Environment;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import java.util.ArrayList;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;


@Kroll.module(name="TiPixelReader", id="com.kosso.tipixelreader")
public class TiPixelReaderModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiPixelReaderModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiPixelReaderModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	@Kroll.method
	public void getImagePixels(final String image_path, final KrollFunction callback) {
		
		Uri uri = Uri.parse(image_path); // will be app:// something.. 
		String path = uri.getPath();
		File imgFile = new File(path);
		if (imgFile.exists()) {
			Log.i(LCAT, "getImagePixels file OK... ");
			Bitmap imageIn = BitmapFactory.decodeFile(path);
			int width = imageIn.getWidth();
			int height = imageIn.getHeight();

			//int lines[];
			List<Object> lines = new ArrayList<>();


			for(int y = 0; y < height; y++){  

				//lines[0] = y;
				List<Integer> line_data = new ArrayList<>();
				line_data.add(y);

				for(int x = 0; x < width; x++){  
					
					final int color = imageIn.getPixel(x, y);
					int A = (color >> 24) & 0xff;
					int R = (color >> 16) & 0xff;
					int G = (color >>  8) & 0xff;
					int B = (color      ) & 0xff;
					// Log.i(LCAT, "getImagePixels: "+x+","+y+": RGB "+R+","+G+","+B);

					line_data.add(R);
					line_data.add(G);
					line_data.add(B);

				}

				lines.add(line_data.toArray());

			}

			Log.i(LCAT, "getImagePixels: image processed OK");
			imageIn.recycle();

			KrollDict map = new KrollDict();
			map.put("lines", lines.toArray());
			callback.call(getKrollObject(), map);
			map = null;
			

		} else {
			Log.i(LCAT, "getImagePixels: IMAGE DOES NOT EXIST: " + path);
		}
		imgFile = null;
	}
	
}

